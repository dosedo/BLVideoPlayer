#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
#ifndef CUPCAKE_SWIFT_H
#define CUPCAKE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Cupcake",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;
@class NSString;

SWIFT_CLASS("_TtC7Cupcake12CPKStackView")
@interface CPKStackView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)willRemoveSubview:(UIView * _Nonnull)subview;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


@class ConsMaker;

@interface CPKStackView (SWIFT_EXTENSION(Cupcake))
- (nonnull instancetype)bg:(id _Nonnull)any;
- (nonnull instancetype)tint:(id _Nonnull)any;
- (nonnull instancetype)radius:(CGFloat)cornerRadius;
- (nonnull instancetype)border:(CGFloat)borderWidth :(id _Nullable)borderColor;
- (nonnull instancetype)shadow:(CGFloat)shadowOpacity :(CGFloat)shadowRadius :(CGFloat)shadowOffsetX :(CGFloat)shadowOffsetY :(id _Nullable)shadowColor;
- (nonnull instancetype)onClick:(void (^ _Nonnull)(CPKStackView * _Nonnull))closure;
- (nonnull instancetype)onTap:(void (^ _Nonnull)(void))closure;
- (nonnull instancetype)addTo:(UIView * _Nonnull)superView;
- (nonnull instancetype)styles:(id _Nonnull)s1 :(id _Nullable)s2 :(id _Nullable)s3 :(id _Nullable)s4;
- (nonnull instancetype)touchInsets:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)margin:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)embedIn:(UIView * _Nonnull)superview :(id _Nullable)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)makeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
- (nonnull instancetype)remakeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
@end


SWIFT_CLASS("_TtC7Cupcake8ConsAtts")
@interface ConsAtts : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7Cupcake4Cons")
@interface Cons : ConsAtts
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS("_TtC7Cupcake9ConsMaker")
@interface ConsMaker : ConsAtts
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@class UIColor;

SWIFT_CLASS("_TtC7Cupcake11StackSpring")
@interface StackSpring : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, getter=isOpaque) BOOL opaque;
@property (nonatomic) BOOL clipsToBounds;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7Cupcake9StaticRow")
@interface StaticRow : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface StaticRow (SWIFT_EXTENSION(Cupcake))
/// Call when cell is being selected.
/// By passing a callback handler, the cell become selectable.
/// Be aware of retain cycle when using this method.
/// Usages:
/// .onClick({ [weak self] row in
/// let cell = row.cell
/// let indexPath = row.indexPath
/// …
/// })
- (nonnull instancetype)onClick:(void (^ _Nonnull)(StaticRow * _Nonnull))callback;
@end


SWIFT_CLASS("_TtC7Cupcake13StaticSection")
@interface StaticSection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSIndexPath;
@class UITableViewCell;

SWIFT_CLASS("_TtC7Cupcake15StaticTableView")
@interface StaticTableView : UITableView <UITableViewDataSource, UITableViewDelegate>
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)sectionIndex SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)sectionIndex SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)sectionIndex SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)sectionIndex SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForFooterInSection:(NSInteger)sectionIndex SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)sectionIndex SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForFooterInSection:(NSInteger)sectionIndex SWIFT_WARN_UNUSED_RESULT;
- (NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)tableView:(UITableView * _Nonnull)tableView shouldHighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath * _Nonnull)indexPath;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame style:(UITableViewStyle)style SWIFT_UNAVAILABLE;
@end


@interface StaticTableView (SWIFT_EXTENSION(Cupcake))
/// Call when cell is being selected.
/// By passing a callback handler, all the cells will become selectable.
/// Be aware of retain cycle when using this method.
/// Usages:
/// .onClick({ [weak self] row in
/// let cell = row.cell
/// let indexPath = row.indexPath
/// …
/// })
- (nonnull instancetype)onClick:(void (^ _Nonnull)(StaticRow * _Nonnull))callback;
@end


@interface StaticTableView (SWIFT_EXTENSION(Cupcake))
- (nonnull instancetype)bg:(id _Nonnull)any;
- (nonnull instancetype)tint:(id _Nonnull)any;
- (nonnull instancetype)radius:(CGFloat)cornerRadius;
- (nonnull instancetype)border:(CGFloat)borderWidth :(id _Nullable)borderColor;
- (nonnull instancetype)shadow:(CGFloat)shadowOpacity :(CGFloat)shadowRadius :(CGFloat)shadowOffsetX :(CGFloat)shadowOffsetY :(id _Nullable)shadowColor;
- (nonnull instancetype)addTo:(UIView * _Nonnull)superView;
- (nonnull instancetype)margin:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)embedIn:(UIView * _Nonnull)superview :(id _Nullable)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)makeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
- (nonnull instancetype)remakeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
@end


SWIFT_CLASS("_TtC7Cupcake11StylesMaker")
@interface StylesMaker : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIResponder;

@interface UIApplication (SWIFT_EXTENSION(Cupcake))
@property (nonatomic, readonly, strong) UIResponder * _Nullable nextResponder;
@end





@interface UIButton (SWIFT_EXTENSION(Cupcake))
/// Setting normal title or normal attributedTitle
/// str can take any kind of value, even primitive type like Int.
/// Usages:
/// .str(1024)
/// .str(“hello world”)
/// .str( AttStr(“hello world”).strikethrough() )
/// …
- (nonnull instancetype)str:(id _Nullable)any;
/// Setting font
/// font use Font() internally, so it can take any kind of values that Font() supported.
/// See Font.siwft for more information.
/// Usages:
/// .font(15)
/// .font(“20”)
/// .font(“body”)
/// .font(“Helvetica,15”)
/// .font(someLabel.font)
/// …
/// *
- (nonnull instancetype)font:(id _Nonnull)any;
/// Setting titleColor
/// color use Color() internally, so it can take any kind of values that Color() supported.
/// See Color.swift for more information.
/// Usages:
/// .color(@“red”)
/// .color(@”#F00”)
/// .color(@“255,0,0”)
/// .color(someLabel.textColor)
/// …
- (nonnull instancetype)color:(id _Nonnull)any;
/// Setting highlighted titleColor
/// highColor use Color() internally, so it can take any kind of values that Color() supported.
/// See Color.swift for more information.
/// Usages:
/// .highColor(@“red”)
/// .highColor(@”#F00”)
/// .highColor(@“255,0,0”)
/// .highColor(someLabel.textColor)
/// …
- (nonnull instancetype)highColor:(id _Nullable)any;
/// Setting normal image
/// img use Img() internally, so it can take any kind of values that Img() supported.
/// See Img.swift for more information.
/// Usages:
/// .img(“cat”)
/// .img(”#button-background”)
/// .img(”$home-icon”)
/// .img(someImage)
/// …
- (nonnull instancetype)img:(id _Nullable)any;
/// Setting highlighted image
/// highImg use Img() internally, so it can take any kind of values that Img() supported.
/// See Img.swift for more information.
/// Usages:
/// .highImg(“cat”)
/// .highImg(”#button-background”)
/// .highImg(”$home-icon”)
/// .highImg(someImage)
/// …
- (nonnull instancetype)highImg:(id _Nullable)any;
/// Setting background with Color or Image.
/// bg use Img() internally, so it can take any kind of values that Img() supported.
/// See Img.swift for more information.
/// Usages:
/// .bg(@“red”)
/// .bg(@”#F00”)
/// .bg(@“255,0,0”)
/// .bg(someView.backgroundColor)
/// .bg(“cat”)      //using image
/// .bg(someImage)  //using image
/// …
- (nonnull instancetype)bg:(id _Nonnull)any;
/// Setting highlighted background with Color or Image.
/// highBg use Img() internally, so it can take any kind of values that Img() supported.
/// See Img.swift for more information.
/// Usages:
/// .highBg(@“red”)
/// .highBg(@”#F00”)
/// .highBg(@“255,0,0”)
/// .highBg(someView.backgroundColor)
/// .highBg(“cat”)      //using image
/// .highBg(someImage)  //using image
/// …
- (nonnull instancetype)highBg:(id _Nullable)any;
/// Setting spacing between title and image.
/// Usages:
/// .gap(10)
- (nonnull instancetype)gap:(CGFloat)spacing;
/// Swapping title and image position.
/// Usages:
/// .reversed()
/// .reversed(false)
- (nonnull instancetype)reversed:(BOOL)reversed;
/// Enable multilines for Button.
/// Usages:
/// .lines(2)
/// .lines(0)   //multilines
/// .lines()    //same as .lines(0)
- (nonnull instancetype)lines:(CGFloat)numberOfLines;
@end


@interface UIButton (SWIFT_EXTENSION(Cupcake))
- (nonnull instancetype)radius:(CGFloat)cornerRadius;
- (nonnull instancetype)tint:(id _Nonnull)any;
- (nonnull instancetype)border:(CGFloat)borderWidth :(id _Nullable)borderColor;
- (nonnull instancetype)shadow:(CGFloat)shadowOpacity :(CGFloat)shadowRadius :(CGFloat)shadowOffsetX :(CGFloat)shadowOffsetY :(id _Nullable)shadowColor;
- (nonnull instancetype)onClick:(void (^ _Nonnull)(UIButton * _Nonnull))closure;
- (nonnull instancetype)onTap:(void (^ _Nonnull)(void))closure;
- (nonnull instancetype)addTo:(UIView * _Nonnull)superView;
- (nonnull instancetype)styles:(id _Nonnull)s1 :(id _Nullable)s2 :(id _Nullable)s3 :(id _Nullable)s4;
- (nonnull instancetype)touchInsets:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)margin:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)embedIn:(UIView * _Nonnull)superview :(id _Nullable)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)makeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
- (nonnull instancetype)remakeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
@end




@interface UIImageView (SWIFT_EXTENSION(Cupcake))
/// Setting image
/// img use Img() internally, so it can take any kind of values that Img() supported.
/// See Img.swift for more information.
/// Usages:
/// .img(“cat”)
/// .img(”#button-background”)
/// .img(”$home-icon”)
/// .img(someImage)
/// …
- (nonnull instancetype)img:(id _Nullable)any;
/// Setting contentMode
/// Usages:
/// .mode(.scaleAspectFit)
/// .mode(.center)
/// …
- (nonnull instancetype)mode:(enum UIViewContentMode)contentMode;
@end


@interface UIImageView (SWIFT_EXTENSION(Cupcake))
- (nonnull instancetype)bg:(id _Nonnull)any;
- (nonnull instancetype)tint:(id _Nonnull)any;
- (nonnull instancetype)radius:(CGFloat)cornerRadius;
- (nonnull instancetype)border:(CGFloat)borderWidth :(id _Nullable)borderColor;
- (nonnull instancetype)shadow:(CGFloat)shadowOpacity :(CGFloat)shadowRadius :(CGFloat)shadowOffsetX :(CGFloat)shadowOffsetY :(id _Nullable)shadowColor;
- (nonnull instancetype)onClick:(void (^ _Nonnull)(UIImageView * _Nonnull))closure;
- (nonnull instancetype)onTap:(void (^ _Nonnull)(void))closure;
- (nonnull instancetype)addTo:(UIView * _Nonnull)superView;
- (nonnull instancetype)styles:(id _Nonnull)s1 :(id _Nullable)s2 :(id _Nullable)s3 :(id _Nullable)s4;
- (nonnull instancetype)touchInsets:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)margin:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)embedIn:(UIView * _Nonnull)superview :(id _Nullable)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)makeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
- (nonnull instancetype)remakeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
@end





@interface UILabel (SWIFT_EXTENSION(Cupcake))
/// Setting text or attributedText
/// str can take any kind of value, even primitive type like Int.
/// Usages:
/// .str(1024)
/// .str(“hello world”)
/// .str( AttStr(“hello world”).strikethrough() )
/// …
- (nonnull instancetype)str:(id _Nullable)any;
/// Setting font
/// font use Font() internally, so it can take any kind of values that Font() supported.
/// See Font.swift for more information.
/// Usages:
/// .font(15)
/// .font(“20”)
/// .font(“body”)
/// .font(“Helvetica,15”)
/// .font(someLabel.font)
/// …
/// *
- (nonnull instancetype)font:(id _Nonnull)any;
/// Setting textColor
/// color use Color() internally, so it can take any kind of values that Color() supported.
/// See Color.swift for more information.
/// Usages:
/// .color(@“red”)
/// .color(@”#F00”)
/// .color(@“255,0,0”)
/// .color(someLabel.textColor)
/// …
- (nonnull instancetype)color:(id _Nonnull)any;
/// Setting numberOfLines
/// Usages:
/// .lines(2)
/// .lines(0)   //multilines
/// .lines()    //same as .lines(0)
- (nonnull instancetype)lines:(CGFloat)numberOfLines;
/// \code
/// * Setting lineSpacing
/// * Usages:
///    .lineGap(8)
///
/// \endcode
- (nonnull instancetype)lineGap:(CGFloat)lineSpacing;
/// Setting textAlignment
/// Usages:
/// .align(.center)
/// .align(.justified)
/// …
- (nonnull instancetype)align:(NSTextAlignment)textAlignment;
@end


@interface UILabel (SWIFT_EXTENSION(Cupcake))
- (void)ner_setText:(NSString * _Nonnull)text;
@end


@interface UILabel (SWIFT_EXTENSION(Cupcake))
- (nonnull instancetype)bg:(id _Nonnull)any;
- (nonnull instancetype)tint:(id _Nonnull)any;
- (nonnull instancetype)radius:(CGFloat)cornerRadius;
- (nonnull instancetype)border:(CGFloat)borderWidth :(id _Nullable)borderColor;
- (nonnull instancetype)shadow:(CGFloat)shadowOpacity :(CGFloat)shadowRadius :(CGFloat)shadowOffsetX :(CGFloat)shadowOffsetY :(id _Nullable)shadowColor;
- (nonnull instancetype)onClick:(void (^ _Nonnull)(UILabel * _Nonnull))closure;
- (nonnull instancetype)onTap:(void (^ _Nonnull)(void))closure;
- (nonnull instancetype)addTo:(UIView * _Nonnull)superView;
- (nonnull instancetype)styles:(id _Nonnull)s1 :(id _Nullable)s2 :(id _Nullable)s3 :(id _Nullable)s4;
- (nonnull instancetype)touchInsets:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)margin:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)embedIn:(UIView * _Nonnull)superview :(id _Nullable)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)makeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
- (nonnull instancetype)remakeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
@end


@interface UITextField (SWIFT_EXTENSION(Cupcake))
/// Setting text or attributedText
/// str can take any kind of value, even primitive type like Int.
/// Usages:
/// .str(1024)
/// .str(“hello world”)
/// .str( AttStr(“hello world”).strikethrough() )
/// …
- (nonnull instancetype)str:(id _Nullable)any;
/// Setting placeholder or attributedPlaceholder
/// hint can take any kind of value, even primitive type like Int.
/// Usages:
/// .hint(1024)
/// .hint(“Enter your name”)
/// .hint( AttStr(“Enter your name”).font(13) )
- (nonnull instancetype)hint:(id _Nullable)any;
/// Setting font
/// font use Font() internally, so it can take any kind of values that Font() supported.
/// See Font.siwft for more information.
/// Usages:
/// .font(15)
/// .font(“20”)
/// .font(“body”)
/// .font(someLabel.font)
/// …
/// *
- (nonnull instancetype)font:(id _Nonnull)any;
/// Setting textColor
/// color use Color() internally, so it can take any kind of values that Color() supported.
/// See Color.swift for more information.
/// Usages:
/// .color(@“red”)
/// .color(@”#F00”)
/// .color(@“255,0,0”)
/// .color(someLabel.textColor)
/// …
- (nonnull instancetype)color:(id _Nonnull)any;
/// Max input length
/// Usages:
/// .maxLength(10)
- (nonnull instancetype)maxLength:(CGFloat)length;
/// secureTextEntry
/// Usages:
/// .secure()           //secureTextEntry = true
/// .secure(false)      //secureTextEntry = false
- (nonnull instancetype)secure:(BOOL)secureTextEntry;
/// Setting textAlignment
/// Usages:
/// .align(.center)
/// .align(.justified)
/// …
- (nonnull instancetype)align:(NSTextAlignment)textAlignment;
/// Setting keyboardType
/// Usages:
/// .keyboard(.numberPad)
/// .keyboard(.emailAddress)
/// …
- (nonnull instancetype)keyboard:(UIKeyboardType)keyboardType;
/// Setting returnKeyType
/// Usages:
/// .returnKey(.send)
/// .returnKey(.google)
/// …
- (nonnull instancetype)returnKey:(UIReturnKeyType)returnKeyType;
/// Setting clearButtonMode
/// Usages:
/// .clearMode(.whileEditing)
/// .clearMode(.always)
/// …
- (nonnull instancetype)clearMode:(enum UITextFieldViewMode)clearButtonMode;
@end


@interface UITextField (SWIFT_EXTENSION(Cupcake))
- (nonnull instancetype)bg:(id _Nonnull)any;
- (nonnull instancetype)tint:(id _Nonnull)any;
- (nonnull instancetype)radius:(CGFloat)cornerRadius;
- (nonnull instancetype)border:(CGFloat)borderWidth :(id _Nullable)borderColor;
- (nonnull instancetype)shadow:(CGFloat)shadowOpacity :(CGFloat)shadowRadius :(CGFloat)shadowOffsetX :(CGFloat)shadowOffsetY :(id _Nullable)shadowColor;
- (nonnull instancetype)onClick:(void (^ _Nonnull)(UITextField * _Nonnull))closure;
- (nonnull instancetype)onTap:(void (^ _Nonnull)(void))closure;
- (nonnull instancetype)addTo:(UIView * _Nonnull)superView;
- (nonnull instancetype)styles:(id _Nonnull)s1 :(id _Nullable)s2 :(id _Nullable)s3 :(id _Nullable)s4;
- (nonnull instancetype)touchInsets:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)margin:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)embedIn:(UIView * _Nonnull)superview :(id _Nullable)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)makeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
- (nonnull instancetype)remakeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
@end


@interface UITextField (SWIFT_EXTENSION(Cupcake))
- (CGRect)cpk_textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)cpk_editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
@end


@interface UITextView (SWIFT_EXTENSION(Cupcake))
/// Setting text or attributedText
/// str can take any kind of value, even primitive type like Int.
/// Usages:
/// .str(1024)
/// .str(“hello world”)
/// .str( AttStr(“hello world”).strikethrough() )
/// …
- (nonnull instancetype)str:(id _Nullable)any;
/// Setting placeholder or attributedPlaceholder
/// hint can take any kind of value, even primitive type like Int.
/// Usages:
/// .hint(1024)
/// .hint(“Enter here”)
/// .hint( AttStr(“Enter here”).font(13) )
- (nonnull instancetype)hint:(id _Nullable)any;
/// Setting font
/// font use Font() internally, so it can take any kind of values that Font() supported.
/// See Font.siwft for more information.
/// Usages:
/// .font(15)
/// .font(“20”)
/// .font(“body”)
/// .font(someLabel.font)
/// …
/// *
- (nonnull instancetype)font:(id _Nonnull)any;
/// Setting textColor
/// color use Color() internally, so it can take any kind of values that Color() supported.
/// See Color.swift for more information.
/// Usages:
/// .color(@“red”)
/// .color(@”#F00”)
/// .color(@“255,0,0”)
/// .color(someLabel.textColor)
/// …
- (nonnull instancetype)color:(id _Nonnull)any;
/// Max input length
/// Usages:
/// .maxLength(10)
- (nonnull instancetype)maxLength:(CGFloat)length;
/// Setting textAlignment
/// Usages:
/// .align(.center)
/// .align(.justified)
/// …
- (nonnull instancetype)align:(NSTextAlignment)textAlignment;
@end


@interface UITextView (SWIFT_EXTENSION(Cupcake))
- (void)cpk_deinit;
@end


@interface UITextView (SWIFT_EXTENSION(Cupcake))
- (nonnull instancetype)bg:(id _Nonnull)any;
- (nonnull instancetype)tint:(id _Nonnull)any;
- (nonnull instancetype)radius:(CGFloat)cornerRadius;
- (nonnull instancetype)border:(CGFloat)borderWidth :(id _Nullable)borderColor;
- (nonnull instancetype)shadow:(CGFloat)shadowOpacity :(CGFloat)shadowRadius :(CGFloat)shadowOffsetX :(CGFloat)shadowOffsetY :(id _Nullable)shadowColor;
- (nonnull instancetype)onClick:(void (^ _Nonnull)(UITextView * _Nonnull))closure;
- (nonnull instancetype)onTap:(void (^ _Nonnull)(void))closure;
- (nonnull instancetype)addTo:(UIView * _Nonnull)superView;
- (nonnull instancetype)styles:(id _Nonnull)s1 :(id _Nullable)s2 :(id _Nullable)s3 :(id _Nullable)s4;
- (nonnull instancetype)touchInsets:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)margin:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)embedIn:(UIView * _Nonnull)superview :(id _Nullable)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
- (nonnull instancetype)makeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
- (nonnull instancetype)remakeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
@end




@interface UIView (SWIFT_EXTENSION(Cupcake))
/// Setting layout margins.
/// Very useful when embed in StackView.
/// It can take variety of forms.
/// Usages:
/// .margin(10)                     //top: 10, left: 10, bottom: 10, right: 10
/// .margin(10, 20)                 //top: 10, left: 20, bottom: 10, right: 20
/// .margin(10, 20, 30)             //top: 10, left: 20, bottom: 0 , right: 30
/// .margin(10, 20, 30, 40)         //top: 10, left: 20, bottom: 30, right: 40
- (nonnull instancetype)margin:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
/// Making constraints just like SnapKit.
/// makeCons will only create new constraints when needed.
/// Usages:
/// .makeCons({
/// _.left.top.equal(someView).offset(20, 20)
/// _.size.equal(100, 100)
/// })
- (nonnull instancetype)makeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
/// Remake constarints just like SnapKit.
/// remakeCons will remove all previous installed constarints first.
/// Usages:
/// .makeCons({
/// _.center.equal(someView)
/// _.size.equal(anotherView)
/// })
- (nonnull instancetype)remakeCons:(SWIFT_NOESCAPE void (^ _Nonnull)(ConsMaker * _Nonnull))closure;
/// Embed self into superview with optional edge constraints.
/// Passing nil means no constraint.
/// Usages:
/// .embedIn(superview)                     //top: 0,  left: 0,  bottom: 0,  right: 0
/// .embedIn(superview, 10)                 //top: 10, left: 10, bottom: 10, right: 10
/// .embedIn(superview, 10, 20)             //top: 10, left: 20, bottom: 10, right: 20
/// .embedIn(superview, 10, 20, 30)         //top: 10, left: 20, right: 30
/// .embedIn(superview, 10, 20, 30, 40)     //top: 10, left: 20, bottom: 30, right: 40
/// .embedIn(superview, 10, 20, nil)        //top: 10, left: 20
/// Passing string value instead of CGFloat will constraint to superview’s margin.
/// This is useful when embed in controller’s view whose margin may not be 0.
/// Usages:
/// .embedIn(superview, “10”, 20, “30”, 40) //topMargin: 10, left: 20, bottomMargin: 30, right: 40
- (nonnull instancetype)embedIn:(UIView * _Nonnull)superview :(id _Nullable)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
@end


@interface UIView (SWIFT_EXTENSION(Cupcake))
/// Setting background with Color or Image.
/// bg use Color() internally, so it can take any kind of values that Color() supported.
/// See Color.swift for more information.
/// Usages:
/// .bg(@“red”)
/// .bg(@”#F00”)
/// .bg(@“255,0,0”)
/// .bg(someView.backgroundColor)
/// .bg(“cat”)      //using image
/// …
- (nonnull instancetype)bg:(id _Nonnull)any;
/// Setting tintColor
/// tint use Color() internally, so it can take any kind of values that Color() supported.
/// See Color.swift for more information.
/// Usages:
/// .tint(“red”)
/// .tint(”#00F”)
- (nonnull instancetype)tint:(id _Nonnull)any;
/// Setting cornerRadius
/// radius support auto rounding, which is a very useful trick when working with AutoLayout.
/// Auto rounding will alway set cornerRadius to half of the height not matter what size it is.
/// Usages:
/// .radius(10)
/// .radius(-1)   //passing negative number means using auto rounding
- (nonnull instancetype)radius:(CGFloat)cornerRadius;
/// Setting border with borderWidth and borderColor (optional).
/// border’s second argument use Color() internally, so it can take any kind of values that Color() supported.
/// See Color.swift for more information.
/// Usages:
/// .border(1)
/// .border(1, “red”)
- (nonnull instancetype)border:(CGFloat)borderWidth :(id _Nullable)borderColor;
/// Drop shadow with opacity, radius (optional), offset (optional) and color (optional).
/// shadow’s color argument use Color() internally, so it can take any kind of values that Color() supported.
/// See Color.swift for more information.
/// Usages:
/// .shadow(1)
/// .shadow(0.7, 2)
/// .shadow(0.7, 3, 0, 0)
/// .shadow(0.7, 3, 0, 0, “red”)
- (nonnull instancetype)shadow:(CGFloat)shadowOpacity :(CGFloat)shadowRadius :(CGFloat)shadowOffsetX :(CGFloat)shadowOffsetY :(id _Nullable)shadowColor;
/// Apply at most 4 styles to view.
/// See Styles.swift for more information.
/// Usages:
/// .styles(myStyle)
/// .styles(myStyle1, myStyle2, “globalStyle1”)
/// .styles(someView)       //retrieve styles direct from view
- (nonnull instancetype)styles:(id _Nonnull)s1 :(id _Nullable)s2 :(id _Nullable)s3 :(id _Nullable)s4;
/// Setting touch insets.
/// Very useful for extending touch area.
/// It can take variety of forms.
/// Usages:
/// .touchInsets(10)                    //top: 10, left: 10, bottom: 10, right: 10
/// .touchInsets(10, 20)                //top: 10, left: 20, bottom: 10, right: 20
/// .touchInsets(10, 20, 30)            //top: 10, left: 20, bottom: 0 , right: 30
/// .touchInsets(10, 20, 30, 40)        //top: 10, left: 20, bottom: 30, right: 40
- (nonnull instancetype)touchInsets:(id _Nonnull)p1 :(id _Nullable)p2 :(id _Nullable)p3 :(id _Nullable)p4;
/// Setup click handler.
/// This will automatically set isUserInteractionEnabled to true as well.
/// Be aware of retain cycle when using this method.
/// Usages:
/// .onClick({ view in /* … <em>/ })             //the view being clicked is pass as parameter
/// .onClick({ _ in /</em> … <em>/ })                //if you don’t care at all
/// .onClick({ [weak self] _ in /</em> … */ })    //capture self as weak reference when needed
- (nonnull instancetype)onClick:(void (^ _Nonnull)(UIView * _Nonnull))closure;
/// Same as onClick but with zero parameter.
- (nonnull instancetype)onTap:(void (^ _Nonnull)(void))closure;
/// Add current view to superview.
/// Usages:
/// .addTo(superView)
- (nonnull instancetype)addTo:(UIView * _Nonnull)superview;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
